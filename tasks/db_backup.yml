---
- name: Verify that backup directory exists
  file:
    path: "{{ lookup('env', 'POET_PROJECT_PATH') }}/cellar/backup/database/"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0700

# - name: Dump the database "{{ lookup('env', 'POET_DATABASE_NAME') }}"
#   postgresql_db:
#     name: "{{ lookup('env', 'POET_DATABASE_NAME') }}"
#     login_user: "{{ lookup('env', 'POET_DATABASE_USER') }}"
#     login_password: "{{ lookup('env', 'POET_DATABASE_PASSWORD') }}"
#     state: dump
#     target: "{{ lookup('env', 'POET_PROJECT_PATH') }}/cellar/backup/database/{{ lookup('env', 'POET_DATABASE_NAME') }}-{{ lookup('pipe','date +%Y%m%d.%H%M') }}-{{ lookup('env', 'POET_VERSION') }}-sql.gz"
#     dump_extra_args: --no-owner --no-privileges

- name: Set the name of the dump file
  set_fact: filename="{{ lookup('env', 'POET_DATABASE_NAME') }}-{{ lookup('pipe','date +%Y%m%d.%H%M') }}-{{ lookup('env', 'POET_VERSION') }}-sql"

- name: Dump the database "{{ lookup('env', 'POET_DATABASE_NAME') }}"
  shell: "PGPASSWORD={{ lookup('env', 'POET_DATABASE_PASSWORD') }} && pg_dump --compress=9 --no-owner --no-privileges --format=c -U {{ lookup('env', 'POET_DATABASE_USER') }} {{ lookup('env', 'POET_DATABASE_NAME') }} -f {{ lookup('env', 'POET_PROJECT_PATH') }}/cellar/backup/database/{{ filename }}.dump"

- name: Find backup files
  find:
    paths: "{{ lookup('env', 'POET_PROJECT_PATH') }}/cellar/backup/database/"
  register: found_files

- name: Get latest file
  set_fact:
    latest_file: "{{ (found_files.files|sort(attribute='mtime')|last).path }}"

- name: File to zip
  debug:
    msg: "{{ latest_file }}"

- name: Zip the dumped file
  shell: "tar -C {{ lookup('env', 'POET_PROJECT_PATH') }}/cellar/backup/database/ -czf {{ filename }}.tar.gz ./$(basename -- {{ latest_file }})"

# - name: "Delete original file {{ latest_file }}"
#   file:
#     path: "{{ latest_file }}"
#     state: absent